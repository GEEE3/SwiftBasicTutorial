// by geee3, March 16, 2023

import UIKit

/*
 데이터 타입 안심
 
 애플이 처음 Swift를 발표할 때 강조했던 Swift의 특징 중 안전성이 가장 뚜렷하게 나
 타나는 부분입니다. Swift는 타입에 굉장히 민감하고 엄격합니다. 서로 다른 타입끼리의 데
 이터 교환은 꼭 타입캐스팅을 거쳐야 합니다. Swift에서 값 타입의 데이터 교환은 엄밀히
 말하면 타입캐스팅이 아닌 새로운 인스턴스를 생성하여 할당하는 것입니다.
 
 Swift는 데이터 타입을 안심하고 사용할 수 있는 Type safe 언어입니다. 타입을 안심
 하고 사용할 수 있다는 말은 그만큼 실수를 줄일 수 있다는 의미입니다. 예를 들어 Int
 타입 변수에 할당하려는 값이 Character 타입이라면 컴파일 오류가 발생합니다. 이런 오
 류는 프로그래밍 도중에 눈치채기 어려워 컴파일러가 알려주지 않으면 나중에 오류를 찾아
 내기도 쉽지 않습니다. 그렇지만 Swift는 컴파일 오류로 알려주므로 서로 다른 타입의
 값을 할당하는 실수를 줄일 수 있습니다. 이렇게 Swift가 컴파일 시 타입을 확인하는 것을
 타입 확인이라고 합니다.
 
 Swift에서는 변수나 상수를 선언할 때 특정 타입을 명시하지 않아도 컴파일러가 할당된 값
 을 기준으로 변수나 상수의 타입을 결정합니다. 예를 들어 let fruit = "Apple"라는
 코드를 작성하면, 컴파일러가 컴파일하면서 fruit의 타입을 String으로 결정합니다.
 */

/*
 타입 별칭
 
 Swift에서 기본으로 제공하는 데이터 타입이든, 사용자가 임의로 만든 데이터 타입이든 이
 미 존재하는 데이터 타입에 임의로 다른 이름(별칭)을 부여할 수 있습니다. 그런 다음 기본 타
 입 이름과 이후에 추가한 별칭을 모두 사용할 수 있습니다.
 */

typealias IntA = Int
typealias IntB = Int

let age: IntA = 27
let year: IntB = 2023
let birth = year - age

/*
 튜플
 
 튜플은 타입의 이름이 따로 지정되어 있지 않은, 프로그래머 마음대로 만드는 타입입니다. '지
 정된 데이터의 묶음'이라고 표현할 수 있습니다. C 언어를 예로 들자면 원시 구조체의 형태와
 가깝습니다. 튜플은 타입 이름이 따로 없으므로 일정 타입의 나열만으로 튜플 타입을 생성해줄
 수 있습니다. 튜플에 포함될 데이터의 개수는 자유롭게 정할 수 있습니다.
 */

var person: (String, Int, Double) = ("geee3", 27, 176)
print("이름: \(person.0), 나이: \(person.1), 신장: \(person.2)")

// String, Int, Double 타입을 갖는 튜플
var fruit: (name: String, weight: Double) = ("apple", 0.5)

// 요소 이름을 통해서 값을 빼 올 수 있습니다.
print("이름: \(fruit.name), 무게: \(fruit.weight)")
